#!/usr/bin/python

from __future__ import annotations

# Standard Library
import argparse
import sys
from pathlib import Path
from typing import List
from importlib import import_module
from os.path import basename, dirname
from typing import Tuple, Callable, Any

# Custom Library
from lark import Lark, Transformer, v_args
from lark.lexer import Token
from typeguard import typechecked as strict

# Personal Library

arg_parser = argparse.ArgumentParser(
        prog="simpl",
        description="Compiler for SiMPL",
        epilog="by sizzleru"
)

arg_parser.add_argument("-f", "--file")
#parser.add_argument("-v", "--verbose")

def load_module(module_path: Path) -> None:
    if not module_path.is_file():
        raise FileNotFoundError

    module_name = (dirname(module_path) + '/' + module_path.stem).replace("/",".")
    return import_module(module_name).Module


@v_args(inline=True)
#@strict
class SiMPLTransformer(Transformer):
    def module(self: SiMPLTransformer, token: Token) -> Token:
        module_name = Path(token)
        return_token = token.update(value=module_name)
        modules[module_name] = load_module(return_token.value)
        return return_token

    def command(self: SiMPLTransformer, token: Token) -> Token:
        return token

    def line(self: SiMPLTransformer, *tokens: Token) -> Token | Tuple:
        token, rest = tokens if len(tokens) == 2 else tokens[0], None
        return token

def generate_parser(modules):
    final_grammar = "line:command\"\\n\"line?\n"
    grammars = []

    for module_name, module in modules.items():
        grammars = module.grammarize(grammars)

    grammars.sort(key=lambda grammar: grammar[0].token_name())
    terminal_defined = set()

    for grammar in grammars:
        terminal, rule = grammar
        if terminal.token_name() in terminal_defined:
            final_grammar += "|" + rule.token() + "\n"
        else:
            terminal_defined.add(terminal.token_name())
            final_grammar += terminal.token_name() + ":" + rule.token() + "\n"

    print(final_grammar)

    return Lark(final_grammar, start="line")


if __name__ == "__main__":

    # Allow module imports
    initial_modules = [
            'module/default/system/module_name/base/v0_0_1.py',
            'module/default/system/import/base/v0_0_1.py',
            'module/default/system/printable/str/v0_0_1.py',
            'module/default/math_object/numbers/integers/base/v0_0_1.py'
    ]

    modules = {}
    for initial_module in map(Path, initial_modules):
        modules[initial_module] = load_module(initial_module)
    parser = generate_parser(modules)

    if (input_file := arg_parser.parse_args().file) != "":
        file = open(input_file, "r")
        file_content = file.read()

        result = parser.parse(file_content)
        print(result.pretty())
    else:
        raise NotImplementedError

