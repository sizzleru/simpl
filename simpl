#!/usr/bin/python

from __future__ import annotations

# Standard Library
import argparse
import sys
from pathlib import Path
from typing import List
from importlib import import_module
from os.path import basename, dirname
from typing import Tuple, Callable, Any

# Custom Library
from lark import Lark, Transformer, v_args
from lark.lexer import Token
from lark.tree import Tree
from typeguard import typechecked as strict

# Personal Library
from source.cfg import CFG
from source.module import load_module, load_modules, ModulePath
from source.parse import generate_parser, SiMPLTransformer

arg_parser = argparse.ArgumentParser(
        prog="simpl",
        description="Compiler for SiMPL",
        epilog="by sizzleru"
)

arg_parser.add_argument("-f", "--file")
#parser.add_argument("-v", "--verbose")

if __name__ == "__main__":

    # Allow module imports
    initial_module = ModulePath('object/system/module')

    # Global dynamic modules (generates grammar)
    modules = load_modules(initial_module)

    transformer = SiMPLTransformer(modules)
    parser = generate_parser(modules)

    if (input_file := arg_parser.parse_args().file) != "":
        file_contents = []
        file_segment = ""

        file = open(input_file, "r")
        for line in file:
            if line.split(' ')[0] == 'load':
                if file_segment != "":
                    file_contents.append(file_segment)
                file_segment = ""
                file_contents.append(line)
            else:
                file_segment += line
        if file_segment != "":
            file_contents.append(file_segment)

        for file_segment in file_contents:
            tree = parser.parse(file_segment)
            #print(tree.pretty())
            leftover = transformer.transform(tree)
            parser = generate_parser(modules)
    else:
        raise NotImplementedError

